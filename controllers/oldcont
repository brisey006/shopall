const express = require('express');
const Cart = require('../models/cart');
const Product = require('../models/product');
const User = require('../models/user');
const About = require('../models/about');
const Contact = require('../models/contact');
const Service = require('../models/service');
const Order = require('../models/order');
const Review = require('../models/review');
const keys = require('../config/keys');
const stripe = require('stripe')(keys.stripeSecretKey);
const paypal = require('paypal-rest-sdk');

paypal.configure({
  'mode': 'sandbox',
  'client_id': 'ATZTv4btnHKCWN_TZBOfZV55tH6WdQSKROYSc6IctXHDZkh6E3-B6mHbk1T-hs3lmqk32XtC_kw7K0Df' ,
  'client_secret': 'EARFVIIDOzG68IiH3nQ3BvyY2jAGcgit2ZT7BBFz6soG_cBFIAiyUAuOUWroC5QhlruuBtBx0lyGxNMA'
});

module.exports = {
  addCheckoutPaypal: async (req, res, next) => {
    try {
      const productId = req.params.id;
      const product = await Product.findById(productId);

      const create_payment_json = {
          "intent": "sale",
          "payer": {
              "payment_method": "paypal"
          },
          "redirect_urls": {
              "return_url": "http://localhost:8080/user/profile",
              "cancel_url": "http://localhost:8080/cart"
          },
          "transactions": [{
              "item_list": {
                  "items": [{
                      "name": "Sadza",
                      "sku": "001",
                      "price": "100.00",
                      "currency": "USD",
                      "quantity": 1
                  }]
              },
              "amount": {
                  "currency": "USD",
                  "total": "100.00"
              },
              "description": "This is the payment for sadza."
          }]
      };

      await paypal.payment.create(create_payment_json, function (error, payment) {
          if (error) {
              throw error;
          } else {
              for (var i = 0; i < payment.links.length; i++) {
                if (payment.links[i].rel === 'approval_url') {
                 res.redirect(payment.links[i].href);
                }
              }
          }
      });

      //res.redirect('back')
    } catch (err) {
      next(err)
    }
  },

  getCheckoutCard: async (req, res, next) => {
    try {
      if (!req.session.cart) {
        return res.redirect('/cart')
      }
      const productId = req.params.id;
      const product = await Product.findById(productId)

      const shop = await User.findById(product.owner);
      var cart = new Cart(req.session.cart);
      const products = cart.generateArray();

      var prod;
      for (var i = 0; i < products.length; i++) {
        if (products[i].item._id == productId) {
          prod = products[i];
        }
      }

      if (!prod.price) {
        return res.redirect('/cart')
      }



      var pcnt = product.discount;
      if (!product.discount) {
        pcnt = 0;
      }

      var subtotal = prod.qty * product.price;
      var discount = (pcnt * subtotal) / 100;
      var price = subtotal - discount;

      var errorMsg = req.flash('error')[0];
      res.render('checkout-card', {
        product: product,
        qty: prod.qty,
        discount: pcnt,
        stripeAmt: Math.ceil(price) * 100,
        shop: shop,
        stripePublishableKey: keys.stripePublishableKey,
        subtotal: subtotal,
        price: Math.ceil(price),
        errorMsg: errorMsg,
        noError: !errorMsg
      })
    } catch (err) {
      next(err)
    }
  },

  addCheckoutCard: async (req, res, next) => {
    try {
      if (!req.session.cart) {
        res.redirect('/cart')
      }
      const userId = req.session.passport.user;
      const user = await User.findById(userId);
      const productId = req.params.id;
      const product = await Product.findById(productId)
      var cart = new Cart(req.session.cart);
      const products = cart.generateArray();
      const shop = await User.findById(product.owner);

      var prod;
      for (var i = 0; i < products.length; i++) {
        if (products[i].item._id == productId) {
          prod = products[i];
        }
      }

      var pcnt = product.discount;
      if (!product.discount) {
        pcnt = 0;
      }

      var subtotal = prod.qty * product.price;
      var discount = (pcnt * subtotal) / 100;
      var price = subtotal - discount;
      var aPrice = Math.ceil(price);

      var paymentId;


      stripe.customers.create({
        email: req.user.email,
        description: req.user.fullname,
        source: req.body.stripeToken
      })
      .then(customer => stripe.charges.create({
        amount: aPrice * 100,
        description: 'Purchase of ' + prod.qty + ' ' + product.name +  ' from ' + shop.fullname ,
        currency: 'usd',
        customer: customer.id
      }))
      .then( charge => {
          var cart = new Cart(req.session.cart);
          cart.remove(product, product.id);
          req.session.cart = cart;
          paymentId = charge.id;

          const date = Date.now();
          const created_at = new Date(date).toDateString();

          var num = Math.random().toExponential().split('e-');
          var num2 = num[0].split('.');
          var order_num = num2[1];

          const order = new Order({
            order_number: order_num,
            product_id: product._id,
            canceled: 0,
            delivered: 0,
            in_progress: 1,
            currency: product.currency,
            price: Math.ceil(price),
            date: created_at,
            name: req.body.name,
            address: req.body.address,
            user: req.user,
            paymentId: paymentId
          });

          order.save().then(order => console.log('Purchase Successfuly Done Sir'))
          user.orders.push(order);
          user.save().then(user => res.redirect('/user/profile-orders'));
        }
       );

    } catch (err) {
      next(err)
    }
  },

  getCheckoutOneMoney: async (req, res, next) => {
    try {
      const productId = req.params.id;
      const product = await Product.findById(productId)

      const shop = await User.findById(product.owner);

      var cart = new Cart(req.session.cart);
      const products = cart.generateArray();

      var prod;
      for (var i = 0; i < products.length; i++) {
        if (products[i].item._id == productId) {
          prod = products[i];
        }
      }

      var pcnt = product.discount;
      if (!product.discount) {
        pcnt = 0;
      }

      var subtotal = prod.qty * product.price;

      var discount = (pcnt * subtotal) / 100;
      var price = subtotal - discount;

      res.render('checkout-onemoney', {
        product: product,
        qty: prod.qty,
        discount: pcnt,
        shop: shop,
        subtotal: subtotal,
        price: Math.ceil(price)
      })
    } catch (err) {
      next(err)
    }
  },

  getCheckoutEcocash: async (req, res, next) => {
    try {
      const productId = req.params.id;
      const product = await Product.findById(productId)

      const shop = await User.findById(product.owner);

      var cart = new Cart(req.session.cart);
      const products = cart.generateArray();

      var prod;
      for (var i = 0; i < products.length; i++) {
        if (products[i].item._id == productId) {
          prod = products[i];
        }
      }

      var pcnt = product.discount;
      if (!product.discount) {
        pcnt = 0;
      }

      var subtotal = prod.qty * product.price;

      var discount = (pcnt * subtotal) / 100;
      var price = subtotal - discount;

      res.render('checkout-ecocash', {
        product: product,
        qty: prod.qty,
        discount: pcnt,
        shop: shop,
        subtotal: subtotal,
        price: Math.ceil(price)
      })
    } catch (err) {
      next(err)
    }
  },

  getCheckoutOther: async (req, res, next) => {
    try {
      const productId = req.params.id;
      const product = await Product.findById(productId)

      const shop = await User.findById(product.owner);

      var cart = new Cart(req.session.cart);
      const products = cart.generateArray();

      var prod;
      for (var i = 0; i < products.length; i++) {
        if (products[i].item._id == productId) {
          prod = products[i];
        }
      }

      var pcnt = product.discount;
      if (!product.discount) {
        pcnt = 0;
      }

      var subtotal = prod.qty * product.price;

      var discount = (pcnt * subtotal) / 100;
      var price = subtotal - discount;

      res.render('checkout-other', {
        product: product,
        qty: prod.qty,
        discount: pcnt,
        shop: shop,
        subtotal: subtotal,
        price: Math.ceil(price)
      })
    } catch (err) {
      next(err)
    }
  },
}


/*.then(() => {
  stripe.charges.create({
    amount: aPrice * 100,
    description: product.name,
    source: req.body.stripeToken,
    currency: "usd"
  }, function(err, charge) {
    if (err) {
      req.flash('error', err.message);
      return res.redirect('back');
    }
    req.flash('success', 'Successfuly bought the Product');
    var cart = new Cart(req.session.cart);
    cart.remove(product, product.id);
    req.session.cart = cart;
    paymentId = charge.id;
    res.redirect('/user/profile-orders')

    name: req.user.fullname,
    phone: req.user.cell,
    address: req.user.address,
  })
})*/
